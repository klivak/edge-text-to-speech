class EdgeTTS {
    constructor() {
        this.socket = null;
        this.audioData = [];
        this.isConnected = false;
        this.onStatusChange = null;
        this.dataSeparator = new TextEncoder().encode("Path:audio\r\n");
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è UUID –¥–ª—è –∑'—î–¥–Ω–∞–Ω–Ω—è
    generateConnectionId() {
        const uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
            const r = (Math.random() * 16) | 0;
            const v = c == 'x' ? r : (r & 0x3) | 0x8;
            return v.toString(16);
        });
        return uuid.replace(/-/g, '');
    }

    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ—ó –¥–∞—Ç–∏ —É –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ
    getCurrentTimestamp() {
        const date = new Date();
        const options = {
            weekday: 'short',
            month: 'short',
            day: '2-digit',
            year: 'numeric',
            hour: '2-digit',
            minute: '2-digit',
            second: '2-digit',
            timeZoneName: 'short',
        };
        const dateString = date.toLocaleString('en-US', options);
        return dateString.replace(/\u200E/g, '') + ' GMT+0000 (Coordinated Universal Time)';
    }

    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è SSML —Ä–æ–∑–º—ñ—Ç–∫–∏
    createSSML(text, voice, pitch = "+0Hz", rate = "+0%") {
        const voiceName = `Microsoft Server Speech Text to Speech Voice (${voice})`;
        return `<speak version='1.0' xmlns='http://www.w3.org/2001/10/synthesis' xml:lang='en-US'>` +
               `<voice name='${voiceName}'>` +
               `<prosody pitch='${pitch}' rate='${rate}' volume='+0%'>` +
               `${text}` +
               `</prosody></voice></speak>`;
    }

    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤ –¥–ª—è SSML
    createSSMLHeaders(requestId, timestamp, ssml) {
        return `X-RequestId:${requestId}\r\n` +
               `Content-Type:application/ssml+xml\r\n` +
               `X-Timestamp:${timestamp}Z\r\n` +
               `Path:ssml\r\n\r\n` +
               ssml;
    }

    // –ü–æ—à—É–∫ —ñ–Ω–¥–µ–∫—Å—É –±–∞–π—Ç–æ–≤–æ–≥–æ —Ä–æ–∑–¥—ñ–ª—å–Ω–∏–∫–∞
    findSeparatorIndex(uint8Array, separator) {
        for (let i = 0; i < uint8Array.length - separator.length + 1; i++) {
            let found = true;
            for (let j = 0; j < separator.length; j++) {
                if (uint8Array[i + j] !== separator[j]) {
                    found = false;
                    break;
                }
            }
            if (found) {
                return i;
            }
        }
        return -1;
    }

    // –û–±—Ä–æ–±–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–∏—Ö –∞—É–¥—ñ–æ –¥–∞–Ω–∏—Ö
    async processAudioData() {
        console.log('üîß –ü–æ—á–∞—Ç–æ–∫ –æ–±—Ä–æ–±–∫–∏ –∞—É–¥—ñ–æ –¥–∞–Ω–∏—Ö...');
        console.log('üìä –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∞—É–¥—ñ–æ –±–ª–æ–∫—ñ–≤:', this.audioData.length);
        
        const totalSize = this.audioData.reduce((total, blob) => total + blob.size, 0);
        console.log('üìè –ó–∞–≥–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä –∞—É–¥—ñ–æ –¥–∞–Ω–∏—Ö:', totalSize, '–±–∞–π—Ç');
        
        const combinedArray = new Uint8Array(totalSize);
        
        let offset = 0;
        let processedBlocks = 0;
        
        for (const blob of this.audioData) {
            const arrayBuffer = await blob.arrayBuffer();
            const uint8Array = new Uint8Array(arrayBuffer);
            
            // –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Ä–æ–∑–¥—ñ–ª—å–Ω–∏–∫ —Ç–∞ –≤–∏—Ç—è–≥—É—î–º–æ –∞—É–¥—ñ–æ –¥–∞–Ω—ñ
            const separatorIndex = this.findSeparatorIndex(uint8Array, this.dataSeparator);
            if (separatorIndex !== -1) {
                const audioStart = separatorIndex + this.dataSeparator.length;
                const audioBytes = uint8Array.slice(audioStart);
                combinedArray.set(audioBytes, offset);
                offset += audioBytes.length;
                processedBlocks++;
                console.log(`‚úÖ –û–±—Ä–æ–±–ª–µ–Ω–æ –±–ª–æ–∫ ${processedBlocks}, —Ä–æ–∑–º—ñ—Ä –∞—É–¥—ñ–æ:`, audioBytes.length, '–±–∞–π—Ç');
            } else {
                console.warn('‚ö†Ô∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ä–æ–∑–¥—ñ–ª—å–Ω–∏–∫ –≤ –∞—É–¥—ñ–æ –±–ª–æ—Ü—ñ');
            }
        }

        // –û–±—Ä—ñ–∑–∞—î–º–æ –º–∞—Å–∏–≤ –¥–æ —Ñ–∞–∫—Ç–∏—á–Ω–æ–≥–æ —Ä–æ–∑–º—ñ—Ä—É
        const finalArray = combinedArray.slice(0, offset);
        console.log('üéØ –§—ñ–Ω–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä –∞—É–¥—ñ–æ:', finalArray.length, '–±–∞–π—Ç');
        
        return new Blob([finalArray], { type: 'audio/mpeg' });
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∞—É–¥—ñ–æ –∑ —Ç–µ–∫—Å—Ç—É
    async generateAudio(text, voice, pitch = "+0Hz", rate = "+0%") {
        return new Promise((resolve, reject) => {
            console.log('üéØ –ü–æ—á–∞—Ç–æ–∫ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∞—É–¥—ñ–æ...');
            console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ–∫—Å—Ç—É:', {
                –¥–æ–≤–∂–∏–Ω–∞: text.length,
                —Å–∏–º–≤–æ–ª—ñ–≤: text.length,
                —Å–ª—ñ–≤: text.split(/\s+/).filter(word => word.length > 0).length,
                —Ä—è–¥–∫—ñ–≤: text.split('\n').length
            });
            
            if (!text.trim()) {
                console.error('‚ùå –ü–æ–º–∏–ª–∫–∞: –¢–µ–∫—Å—Ç –ø–æ—Ä–æ–∂–Ω—ñ–π');
                reject(new Error('–¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º'));
                return;
            }

            // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–±–º–µ–∂–µ–Ω—å Edge TTS
            console.log('üìã –û–±–º–µ–∂–µ–Ω–Ω—è Edge TTS:');
            console.log('   ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞ —Ç–µ–∫—Å—Ç—É: ~3000 —Å–∏–º–≤–æ–ª—ñ–≤');
            console.log('   ‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞: 1000-2000 —Å–∏–º–≤–æ–ª—ñ–≤');
            console.log('   ‚Ä¢ –û–±–º–µ–∂–µ–Ω–Ω—è WebSocket: ~64KB –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è');
            console.log('   ‚Ä¢ –¢–∞–π–º–∞—É—Ç –∑\'—î–¥–Ω–∞–Ω–Ω—è: 30 —Å–µ–∫—É–Ω–¥');
            
            if (text.length > 3000) {
                console.error('‚ùå –ü–æ–º–∏–ª–∫–∞: –¢–µ–∫—Å—Ç –ø–µ—Ä–µ–≤–∏—â—É—î –ª—ñ–º—ñ—Ç Edge TTS');
                console.error('üìè –ü–æ—Ç–æ—á–Ω–∏–π —Ä–æ–∑–º—ñ—Ä:', text.length, '—Å–∏–º–≤–æ–ª—ñ–≤');
                console.error('üìè –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä: 3000 —Å–∏–º–≤–æ–ª—ñ–≤');
                reject(new Error(`–¢–µ–∫—Å—Ç –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π (${text.length} —Å–∏–º–≤–æ–ª—ñ–≤). –ú–∞–∫—Å–∏–º—É–º: 3000 —Å–∏–º–≤–æ–ª—ñ–≤`));
                return;
            }
            
            if (text.length > 2000) {
                console.warn('‚ö†Ô∏è –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è: –í–µ–ª–∏–∫–∏–π –æ–±—Å—è–≥ —Ç–µ–∫—Å—Ç—É', text.length, '—Å–∏–º–≤–æ–ª—ñ–≤');
                console.warn('üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è: –†–æ–∑–¥—ñ–ª—ñ—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ –º–µ–Ω—à—ñ —á–∞—Å—Ç–∏–Ω–∏');
            }

            this.audioData = [];
            const connectionId = this.generateConnectionId();
            const timestamp = this.getCurrentTimestamp();
            
            console.log('üîó –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑\'—î–¥–Ω–∞–Ω–Ω—è:', {
                connectionId: connectionId,
                voice: voice,
                pitch: pitch,
                rate: rate
            });

            // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è WebSocket –∑'—î–¥–Ω–∞–Ω–Ω—è
            const wsUrl = `wss://speech.platform.bing.com/consumer/speech/synthesize/readaloud/edge/v1?TrustedClientToken=6A5AA1D4EAFF4E9FB37E23D68491D6F4&ConnectionId=${connectionId}`;
            
            this.socket = new WebSocket(wsUrl);

            this.socket.onopen = () => {
                console.log('‚úÖ WebSocket –∑\'—î–¥–Ω–∞–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
                this.isConnected = true;
                if (this.onStatusChange) {
                    this.onStatusChange('–ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ —Å–µ—Ä–≤—ñ—Å—É...');
                }

                // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
                const configMessage = `X-Timestamp:${timestamp}\r\n` +
                    `Content-Type:application/json; charset=utf-8\r\n` +
                    `Path:speech.config\r\n\r\n` +
                    `{"context":{"synthesis":{"audio":{"metadataoptions":{"sentenceBoundaryEnabled":false,"wordBoundaryEnabled":true},"outputFormat":"audio-24khz-96kbitrate-mono-mp3"}}}}\r\n`;
                
                console.log('üì§ –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó...');
                this.socket.send(configMessage);

                // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ SSML
                const ssml = this.createSSML(text, voice, pitch, rate);
                const ssmlMessage = this.createSSMLHeaders(connectionId, timestamp, ssml);
                
                console.log('üì§ –í—ñ–¥–ø—Ä–∞–≤–∫–∞ SSML...');
                console.log('üìù SSML —Ä–æ–∑–º—ñ—Ä:', ssmlMessage.length, '–±–∞–π—Ç');
                this.socket.send(ssmlMessage);

                if (this.onStatusChange) {
                    this.onStatusChange('–ì–µ–Ω–µ—Ä—É—é –∞—É–¥—ñ–æ...');
                }
            };

            this.socket.onmessage = async (event) => {
                const data = event.data;
                
                if (typeof data === 'string') {
                    console.log('üì® –û—Ç—Ä–∏–º–∞–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:', data.substring(0, 100) + '...');
                    
                    if (data.includes('Path:turn.end')) {
                        console.log('üèÅ –û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó');
                        // –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó
                        try {
                            console.log('üîß –û–±—Ä–æ–±–∫–∞ –∞—É–¥—ñ–æ –¥–∞–Ω–∏—Ö...');
                            const audioBlob = await this.processAudioData();
                            console.log('‚úÖ –ê—É–¥—ñ–æ —É—Å–ø—ñ—à–Ω–æ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ, —Ä–æ–∑–º—ñ—Ä:', audioBlob.size, '–±–∞–π—Ç');
                            
                            if (this.onStatusChange) {
                                this.onStatusChange('–ê—É–¥—ñ–æ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ!');
                            }
                            resolve(audioBlob);
                        } catch (error) {
                            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∞—É–¥—ñ–æ:', error);
                            reject(error);
                        }
                        this.socket.close();
                    }
                } else if (data instanceof Blob) {
                    // –ó–±–∏—Ä–∞—î–º–æ –∞—É–¥—ñ–æ –¥–∞–Ω—ñ
                    console.log('üéµ –û—Ç—Ä–∏–º–∞–Ω–æ –∞—É–¥—ñ–æ –±–ª–æ–∫, —Ä–æ–∑–º—ñ—Ä:', data.size, '–±–∞–π—Ç');
                    this.audioData.push(data);
                }
            };

            this.socket.onerror = (error) => {
                console.error('‚ùå WebSocket –ø–æ–º–∏–ª–∫–∞:', error);
                if (this.onStatusChange) {
                    this.onStatusChange('–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è');
                }
                reject(new Error('–ü–æ–º–∏–ª–∫–∞ WebSocket –∑\'—î–¥–Ω–∞–Ω–Ω—è'));
            };

            this.socket.onclose = (event) => {
                console.log('üîå WebSocket –∑\'—î–¥–Ω–∞–Ω–Ω—è –∑–∞–∫—Ä–∏—Ç–æ:', {
                    code: event.code,
                    reason: event.reason,
                    wasClean: event.wasClean
                });
                this.isConnected = false;
            };
        });
    }

    // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞—É–¥—ñ–æ —Ñ–∞–π–ª—É
    downloadAudio(audioBlob, filename = 'audio.mp3') {
        const url = URL.createObjectURL(audioBlob);
        const link = document.createElement('a');
        link.href = url;
        link.download = filename;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        URL.revokeObjectURL(url);
    }

    // –ó–∞–∫—Ä–∏—Ç—Ç—è –∑'—î–¥–Ω–∞–Ω–Ω—è
    disconnect() {
        if (this.socket && this.isConnected) {
            this.socket.close();
        }
    }
}

