// –û—Ç—Ä–∏–º–∞–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ DOM
const textInput = document.getElementById('text-input');
const voicesSelect = document.getElementById('voices');
const filterEnglishCheckbox = document.getElementById('filter-english');
const rateSlider = document.getElementById('rate');
const pitchSlider = document.getElementById('pitch');
const rateDisplay = document.getElementById('rate-display');
const pitchDisplay = document.getElementById('pitch-display');
const generateBtn = document.getElementById('generate-btn');
const randomQuoteBtn = document.getElementById('random-quote');
const clearTextBtn = document.getElementById('clear-text');
const saveSettingsBtn = document.getElementById('save-settings');
const clearSettingsBtn = document.getElementById('clear-settings');
const etaDiv = document.getElementById('eta');
const statusDiv = document.getElementById('status');
const charCount = document.getElementById('char-count');
// –ë–ª–æ–∫—É–≤–∞–Ω–Ω—è –∞–≤—Ç–æ–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—ñ—Å–ª—è –æ—á–∏—â–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
let skipSaveSettings = false;

// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–∫–∑–µ–º–ø–ª—è—Ä—ñ–≤
const tts = new EdgeTTS();
const textProcessor = new TextProcessor(2000, 800);

// –§—É–Ω–∫—Ü—ñ—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É
function updateStatus(message, type = '') {
    statusDiv.textContent = message;
    statusDiv.className = `status ${type}`;
    console.log(`üì± UI –°—Ç–∞—Ç—É—Å [${type}]: ${message}`);
}

// –û—Ü—ñ–Ω–∫–∞ —á–∞—Å—É (ETA)
function estimateEta(charCount, partsCount = 1) {
    // –ï–≤—Ä–∏—Å—Ç–∏–∫–∞: ~35-60 —Å–∏–º–≤–æ–ª—ñ–≤/—Å–µ–∫ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —à–≤–∏–¥–∫–æ—Å—Ç—ñ –º–µ—Ä–µ–∂—ñ —ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —Å–µ—Ä–≤–µ—Ä–∞
    // –í—ñ–∑—å–º–µ–º–æ —Å–µ—Ä–µ–¥–Ω—î 45 —Å–∏–º–≤/—Å–µ–∫, –ø–ª—é—Å –Ω–∞–∫–ª–∞–¥–Ω—ñ 1.2 —Å–µ–∫ –Ω–∞ —á–∞—Å—Ç–∏–Ω—É
    const charsPerSecond = 45;
    const baseOverheadSec = 1.2;
    const seconds = Math.ceil(charCount / charsPerSecond + partsCount * baseOverheadSec);
    const minutes = Math.floor(seconds / 60);
    const sec = seconds % 60;
    return minutes > 0 ? `${minutes} —Ö–≤ ${sec} —Å` : `${sec} —Å`;
}

// –§—É–Ω–∫—Ü—ñ—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –∑–Ω–∞—á–µ–Ω—å —Å–ª–∞–π–¥–µ—Ä—ñ–≤
function formatSliderValue(value, unit) {
    const numValue = parseInt(value);
    return numValue >= 0 ? `+${numValue}${unit}` : `${numValue}${unit}`;
}

// –§—É–Ω–∫—Ü—ñ—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞ —Å–∏–º–≤–æ–ª—ñ–≤
function updateCharCount() {
    const count = textInput.value.length;
    charCount.textContent = count;
    
    // –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø—Ä–∏ –∑–º—ñ–Ω—ñ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Å–∏–º–≤–æ–ª—ñ–≤
    if (count % 100 === 0 && count > 0) {
        console.log(`üìä –õ—ñ—á–∏–ª—å–Ω–∏–∫ —Å–∏–º–≤–æ–ª—ñ–≤: ${count}`);
    }
    
    // –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –ø—Ä–∏ –≤–µ–ª–∏–∫–∏—Ö —Ç–µ–∫—Å—Ç–∞—Ö
    if (count > 3000 && count % 500 === 0) {
        console.warn(`‚ö†Ô∏è –í–µ–ª–∏–∫–∏–π —Ç–µ–∫—Å—Ç: ${count} —Å–∏–º–≤–æ–ª—ñ–≤`);
    }
}

// –û–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π –¥–ª—è —Å–ª–∞–π–¥–µ—Ä—ñ–≤
rateSlider.addEventListener('input', (e) => {
    const value = formatSliderValue(e.target.value, '%');
    rateDisplay.textContent = value;
    console.log(`üéöÔ∏è –®–≤–∏–¥–∫—ñ—Å—Ç—å –∑–º—ñ–Ω–µ–Ω–æ: ${value}`);
});

pitchSlider.addEventListener('input', (e) => {
    const value = formatSliderValue(e.target.value, 'Hz');
    pitchDisplay.textContent = value;
    console.log(`üéöÔ∏è –¢–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å –∑–º—ñ–Ω–µ–Ω–æ: ${value}`);
});

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è callback –¥–ª—è —Å—Ç–∞—Ç—É—Å—É TTS
tts.onStatusChange = (message) => {
    updateStatus(message, 'processing');
    console.log(`üéµ TTS –°—Ç–∞—Ç—É—Å: ${message}`);
};

// –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∞—É–¥—ñ–æ
async function generateAudio() {
    console.log('üöÄ –ü–æ—á–∞—Ç–æ–∫ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∞—É–¥—ñ–æ...');
    
    const text = textInput.value.trim();
    const voice = voicesSelect.value;
    const rate = formatSliderValue(rateSlider.value, '%');
    const pitch = formatSliderValue(pitchSlider.value, 'Hz');

    console.log('üìã –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó:', {
        –¥–æ–≤–∂–∏–Ω–∞_—Ç–µ–∫—Å—Ç—É: text.length,
        –≥–æ–ª–æ—Å: voice,
        —à–≤–∏–¥–∫—ñ—Å—Ç—å: rate,
        —Ç–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å: pitch
    });

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–≤–µ–¥–µ–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É
    if (!text) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞: –¢–µ–∫—Å—Ç –ø–æ—Ä–æ–∂–Ω—ñ–π');
        updateStatus('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á—É–≤–∞–Ω–Ω—è', 'error');
        return;
    }

    // –ë–ª–æ–∫—É–≤–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ –ø—ñ–¥ —á–∞—Å –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó
    generateBtn.disabled = true;
    generateBtn.textContent = '–ì–µ–Ω–µ—Ä—É—é...';
    
    try {
        console.log('‚è≥ –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó...');
        updateStatus('–ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó...', 'processing');
        
        // –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç—É (—Ä–æ–∑–¥—ñ–ª–µ–Ω–Ω—è –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏ —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ)
        const textChunks = textProcessor.processText(text);
        const stats = textProcessor.getStats();
        
        console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–æ–±–∫–∏:', stats);

        // –ü–æ–∫–∞–∑–∞—Ç–∏ –æ—Ä—ñ—î–Ω—Ç–æ–≤–Ω–∏–π —á–∞—Å
        const totalChars = text.length;
        const eta = estimateEta(totalChars, textChunks.length);
        etaDiv.textContent = `–û—Ä—ñ—î–Ω—Ç–æ–≤–Ω–∏–π —á–∞—Å –æ–∑–≤—É—á–∫–∏: ${eta}`;
        
        if (textChunks.length === 1) {
            // –û–¥–∏–Ω —Ñ–∞–π–ª - –∑–≤–∏—á–∞–π–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è
            console.log('üéµ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª—É...');
            const audioBlob = await tts.generateAudio(textChunks[0], voice, pitch, rate);
            
            const timestamp = new Date().toISOString().slice(0, 19).replace(/[:]/g, '-');
            const voiceName = voice.split(',')[1].trim().replace('Neural', '');
            const filename = `audio_${voiceName}_${timestamp}.mp3`;
            
            tts.downloadAudio(audioBlob, filename);
            updateStatus(`–ê—É–¥—ñ–æ —Ñ–∞–π–ª "${filename}" –≥–æ—Ç–æ–≤–∏–π!`, 'success');
            
        } else {
            // –ö—ñ–ª—å–∫–∞ —Ñ–∞–π–ª—ñ–≤ - –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø–æ —á–∞—Å—Ç–∏–Ω–∞—Ö
            console.log(`üéµ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è ${textChunks.length} —á–∞—Å—Ç–∏–Ω...`);
            updateStatus(`–ì–µ–Ω–µ—Ä—É—é ${textChunks.length} —á–∞—Å—Ç–∏–Ω...`, 'processing');
            
            const audioBlobs = [];
            
            for (let i = 0; i < textChunks.length; i++) {
                console.log(`üìù –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —á–∞—Å—Ç–∏–Ω–∏ ${i + 1}/${textChunks.length}...`);
                updateStatus(`–ì–µ–Ω–µ—Ä—É—é —á–∞—Å—Ç–∏–Ω—É ${i + 1}/${textChunks.length}...`, 'processing');
                // –û–Ω–æ–≤–ª—é–≤–∞—Ç–∏ ETA –ø–æ —Ö–æ–¥—É
                const doneChars = textChunks.slice(0, i).reduce((n, s) => n + s.length, 0);
                const remaining = totalChars - doneChars;
                etaDiv.textContent = `–û—Ä—ñ—î–Ω—Ç–æ–≤–Ω–∏–π —á–∞—Å –æ–∑–≤—É—á–∫–∏: ${estimateEta(remaining, textChunks.length - i)}`;
                
                try {
                    const audioBlob = await tts.generateAudio(textChunks[i], voice, pitch, rate);
                    audioBlobs.push(audioBlob);
                    console.log(`‚úÖ –ß–∞—Å—Ç–∏–Ω–∞ ${i + 1} –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∞, —Ä–æ–∑–º—ñ—Ä:`, audioBlob.size, '–±–∞–π—Ç');
                } catch (error) {
                    console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —á–∞—Å—Ç–∏–Ω–∏ ${i + 1}:`, error);
                    updateStatus(`–ü–æ–º–∏–ª–∫–∞ —á–∞—Å—Ç–∏–Ω–∏ ${i + 1}: ${error.message}`, 'error');
                    return;
                }
            }
            
            // –û–±'—î–¥–Ω–∞–Ω–Ω—è –≤—Å—ñ—Ö –∞—É–¥—ñ–æ —Ñ–∞–π–ª—ñ–≤
            console.log('üîó –û–±\'—î–¥–Ω–∞–Ω–Ω—è –∞—É–¥—ñ–æ —Ñ–∞–π–ª—ñ–≤...');
            updateStatus('–û–±\'—î–¥–Ω–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤...', 'processing');
            
            const combinedBlob = await combineAudioBlobs(audioBlobs);
            
            const timestamp = new Date().toISOString().slice(0, 19).replace(/[:]/g, '-');
            const voiceName = voice.split(',')[1].trim().replace('Neural', '');
            const filename = `audio_${voiceName}_${timestamp}_combined.mp3`;
            
            tts.downloadAudio(combinedBlob, filename);
            updateStatus(`–û–±'—î–¥–Ω–∞–Ω–∏–π –∞—É–¥—ñ–æ —Ñ–∞–π–ª "${filename}" –≥–æ—Ç–æ–≤–∏–π!`, 'success');
        }
        
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∞—É–¥—ñ–æ:', error);
        console.error('üìã –î–µ—Ç–∞–ª—ñ –ø–æ–º–∏–ª–∫–∏:', {
            –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: error.message,
            —Å—Ç–µ–∫: error.stack
        });
        updateStatus(`–ü–æ–º–∏–ª–∫–∞: ${error.message}`, 'error');
    } finally {
        // –†–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏
        generateBtn.disabled = false;
        generateBtn.textContent = '–ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –∞—É–¥—ñ–æ';
        console.log('üîì –ö–Ω–æ–ø–∫–∞ —Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–∞');
        // –û—á–∏—Å—Ç–∏—Ç–∏ ETA –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
        // –ó–∞–ª–∏—à–∏–º–æ –æ—Å—Ç–∞–Ω–Ω—é –æ—Ü—ñ–Ω–∫—É —â–µ –Ω–∞ –µ–∫—Ä–∞–Ω—ñ; –º–æ–∂–Ω–∞ –æ—á–∏—Å—Ç–∏—Ç–∏ –ø—Ä–∏ –ø–æ—Ç—Ä–µ–±—ñ
    }
}

// –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó
generateBtn.addEventListener('click', generateAudio);

// –û–±—Ä–æ–±–Ω–∏–∫ Enter –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –ø–æ–ª—ñ (Ctrl+Enter –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó)
textInput.addEventListener('keydown', (e) => {
    if (e.ctrlKey && e.key === 'Enter') {
        e.preventDefault();
        generateAudio();
    }
});

// –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –≤ localStorage
function saveSettings(ignoreSkip = false) {
    if (skipSaveSettings && !ignoreSkip) {
        console.log('‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ –∞–≤—Ç–æ–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è (skipSaveSettings=true)');
        return;
    }
    const settings = {
        voice: voicesSelect.value,
        rate: rateSlider.value,
        pitch: pitchSlider.value,
        text: textInput.value,
        filterEnglish: !!(filterEnglishCheckbox && filterEnglishCheckbox.checked)
    };
    localStorage.setItem('edgeTTSSettings', JSON.stringify(settings));
    console.log('üíæ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ:', {
        –≥–æ–ª–æ—Å: settings.voice,
        —à–≤–∏–¥–∫—ñ—Å—Ç—å: settings.rate,
        —Ç–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å: settings.pitch,
        —Ä–æ–∑–º—ñ—Ä_—Ç–µ–∫—Å—Ç—É: settings.text.length
    });
}

// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –∑ localStorage
function loadSettings() {
    try {
        const savedSettings = localStorage.getItem('edgeTTSSettings');
        if (savedSettings) {
            const settings = JSON.parse(savedSettings);
            
            if (settings.voice) {
                // –Ø–∫—â–æ —Ñ—ñ–ª—å—Ç—Ä English –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ ‚Äî —Ç–∏–º—á–∞—Å–æ–≤–æ –∑–Ω—ñ–º–µ–º–æ, —â–æ–± –æ–ø—Ü—ñ—è —ñ—Å–Ω—É–≤–∞–ª–∞
                let restoreFilter = false;
                if (filterEnglishCheckbox && filterEnglishCheckbox.checked && !settings.voice.startsWith('en-')) {
                    restoreFilter = true;
                    applyEnglishFilter(false);
                }
                voicesSelect.value = settings.voice;
                if (restoreFilter) {
                    applyEnglishFilter(true);
                }
            }
            if (settings.rate !== undefined) {
                rateSlider.value = settings.rate;
                rateDisplay.textContent = formatSliderValue(settings.rate, '%');
            }
            if (settings.pitch !== undefined) {
                pitchSlider.value = settings.pitch;
                pitchDisplay.textContent = formatSliderValue(settings.pitch, 'Hz');
            }
            if (settings.text) textInput.value = settings.text;

            if (filterEnglishCheckbox && typeof settings.filterEnglish === 'boolean') {
                filterEnglishCheckbox.checked = settings.filterEnglish;
            }
        }
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å:', error);
    }
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
voicesSelect.addEventListener('change', saveSettings);
rateSlider.addEventListener('change', saveSettings);
pitchSlider.addEventListener('change', saveSettings);
// –ó–±–µ—Ä—ñ–≥–∞—Ç–∏ —ñ –ø—ñ–¥ —á–∞—Å —Ä—É—Ö—É –ø–æ–≤–∑—É–Ω–∫—ñ–≤
rateSlider.addEventListener('input', saveSettings);
pitchSlider.addEventListener('input', saveSettings);
textInput.addEventListener('input', debounce(saveSettings, 1000));

// --- –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –≥–æ–ª–æ—Å—ñ–≤ –∑–∞ –∞–±–µ—Ç–∫–æ—é ---
function sortVoicesOptions() {
    const currentValue = voicesSelect.value;
    const options = Array.from(voicesSelect.options);
    options.sort((a, b) => {
        const aIsRu = a.value.trim().toLowerCase().startsWith('ru-');
        const bIsRu = b.value.trim().toLowerCase().startsWith('ru-');
        // RU –æ–ø—Ü—ñ—ó –≤ –∫—ñ–Ω–µ—Ü—å —Å–ø–∏—Å–∫—É
        if (aIsRu && !bIsRu) return 1;
        if (!aIsRu && bIsRu) return -1;
        // –Ü–Ω–∞–∫—à–µ ‚Äî –∞–ª—Ñ–∞–≤—ñ—Ç–Ω–æ
        return a.text.localeCompare(b.text, undefined, { sensitivity: 'base' });
    });
    voicesSelect.innerHTML = '';
    for (const opt of options) voicesSelect.appendChild(opt);
    // –í—ñ–¥–Ω–æ–≤–∏—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –≤–∏–±—ñ—Ä, —è–∫—â–æ —î
    const hasPrev = options.some(o => o.value === currentValue);
    if (hasPrev) voicesSelect.value = currentValue;
}

// --- –§—ñ–ª—å—Ç—Ä –ª–∏—à–µ English ---
function applyEnglishFilter(checked) {
    const desiredPrefix = 'en-';
    for (const option of Array.from(voicesSelect.options)) {
        const isEnglish = option.value.trim().startsWith(desiredPrefix);
        option.hidden = checked ? !isEnglish : false;
    }

    // –Ø–∫—â–æ –æ–±—Ä–∞–Ω–∏–π –≥–æ–ª–æ—Å –Ω–µ English –∞–±–æ —Å—Ç–∞–≤ –ø—Ä–∏—Ö–æ–≤–∞–Ω–∏–º ‚Äî –æ–±—Ä–∞—Ç–∏ –ø–µ—Ä—à–∏–π –≤–∏–¥–∏–º–∏–π (–ø–µ—Ä—à–∏–π English)
    const selectedOption = voicesSelect.selectedOptions[0];
    const isSelectedVisible = selectedOption && !selectedOption.hidden;
    const isSelectedEnglish = voicesSelect.value.trim().startsWith(desiredPrefix);
    if (checked && (!isSelectedVisible || !isSelectedEnglish)) {
        const firstVisible = Array.from(voicesSelect.options).find(o => !o.hidden);
        if (firstVisible) voicesSelect.value = firstVisible.value;
    }

    saveSettings();
}

if (filterEnglishCheckbox) {
    filterEnglishCheckbox.addEventListener('change', (e) => {
        applyEnglishFilter(e.target.checked);
    });
}

// –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞ —Å–∏–º–≤–æ–ª—ñ–≤ –ø—Ä–∏ –≤–≤–µ–¥–µ–Ω–Ω—ñ —Ç–µ–∫—Å—Ç—É
textInput.addEventListener('input', updateCharCount);



// –§—É–Ω–∫—Ü—ñ—è –∑–∞—Ç—Ä–∏–º–∫–∏ –¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É
function debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
        const later = () => {
            clearTimeout(timeout);
            func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
    };
}

// –§—É–Ω–∫—Ü—ñ—è —Ä–æ–∑–¥—ñ–ª–µ–Ω–Ω—è –≤–µ–ª–∏–∫–æ–≥–æ —Ç–µ–∫—Å—Ç—É –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏
function splitLargeText(text, maxLength = 2000) {
    if (text.length <= maxLength) {
        return [text];
    }
    
    console.log('‚úÇÔ∏è –†–æ–∑–¥—ñ–ª–µ–Ω–Ω—è –≤–µ–ª–∏–∫–æ–≥–æ —Ç–µ–∫—Å—Ç—É –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏...');
    console.log('üìè –ó–∞–≥–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä:', text.length, '—Å–∏–º–≤–æ–ª—ñ–≤');
    console.log('üìè –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä —á–∞—Å—Ç–∏–Ω–∏:', maxLength, '—Å–∏–º–≤–æ–ª—ñ–≤');
    
    const parts = [];
    let currentPart = '';
    const sentences = text.split(/(?<=[.!?])\s+/);
    
    for (const sentence of sentences) {
        if ((currentPart + sentence).length > maxLength && currentPart.length > 0) {
            parts.push(currentPart.trim());
            currentPart = sentence;
        } else {
            currentPart += (currentPart ? ' ' : '') + sentence;
        }
    }
    
    if (currentPart.trim()) {
        parts.push(currentPart.trim());
    }
    
    console.log('üìã –°—Ç–≤–æ—Ä–µ–Ω–æ —á–∞—Å—Ç–∏–Ω:', parts.length);
    parts.forEach((part, index) => {
        console.log(`   –ß–∞—Å—Ç–∏–Ω–∞ ${index + 1}: ${part.length} —Å–∏–º–≤–æ–ª—ñ–≤`);
    });
    
    return parts;
}

// –§—É–Ω–∫—Ü—ñ—è –æ–±'—î–¥–Ω–∞–Ω–Ω—è –∞—É–¥—ñ–æ —Ñ–∞–π–ª—ñ–≤
async function combineAudioBlobs(audioBlobs) {
    console.log('üîó –ü–æ—á–∞—Ç–æ–∫ –æ–±\'—î–¥–Ω–∞–Ω–Ω—è –∞—É–¥—ñ–æ —Ñ–∞–π–ª—ñ–≤...');
    console.log('üìä –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ñ–∞–π–ª—ñ–≤ –¥–ª—è –æ–±\'—î–¥–Ω–∞–Ω–Ω—è:', audioBlobs.length);
    
    // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤—Å—ñ Blob –≤ ArrayBuffer
    const arrayBuffers = [];
    let totalSize = 0;
    
    for (let i = 0; i < audioBlobs.length; i++) {
        const arrayBuffer = await audioBlobs[i].arrayBuffer();
        arrayBuffers.push(arrayBuffer);
        totalSize += arrayBuffer.byteLength;
        console.log(`üìù –§–∞–π–ª ${i + 1}: ${arrayBuffer.byteLength} –±–∞–π—Ç`);
    }
    
    // –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–≥–∞–ª—å–Ω–∏–π ArrayBuffer
    const combinedBuffer = new ArrayBuffer(totalSize);
    const combinedView = new Uint8Array(combinedBuffer);
    
    let offset = 0;
    for (const arrayBuffer of arrayBuffers) {
        const view = new Uint8Array(arrayBuffer);
        combinedView.set(view, offset);
        offset += arrayBuffer.byteLength;
    }
    
    console.log('‚úÖ –û–±\'—î–¥–Ω–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –∑–∞–≥–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä:', totalSize, '–±–∞–π—Ç');
    
    return new Blob([combinedBuffer], { type: 'audio/mpeg' });
}



// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
document.addEventListener('DOMContentLoaded', () => {
    loadSettings();
    updateCharCount(); // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞ —Å–∏–º–≤–æ–ª—ñ–≤
    // –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –≥–æ–ª–æ—Å—ñ–≤ –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
    sortVoicesOptions();
    // –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –≤–º–∏–∫–∞—î–º–æ —Ñ—ñ–ª—å—Ç—Ä English, —è–∫—â–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —â–µ –Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ
    if (filterEnglishCheckbox) {
        if (localStorage.getItem('edgeTTSSettings') === null) {
            filterEnglishCheckbox.checked = true;
        }
        applyEnglishFilter(filterEnglishCheckbox.checked);
    }
    updateStatus('–ì–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏. –í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç —Ç–∞ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å "–ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –∞—É–¥—ñ–æ"');
    
    // –ü—Ä–∏–º—É—Å–æ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏ F5 –∞–±–æ Ctrl+R
    window.addEventListener('beforeunload', () => {
        if (performance.navigation.type === 1) {
            // –ü—Ä–∏–º—É—Å–æ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–µ—à—É
            window.location.reload(true);
        }
    });
});

// –û—á–∏—â–µ–Ω–Ω—è —Ä–µ—Å—É—Ä—Å—ñ–≤ –ø—Ä–∏ –∑–∞–∫—Ä–∏—Ç—Ç—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
window.addEventListener('beforeunload', () => {
    if (!skipSaveSettings) {
        saveSettings();
    } else {
        console.log('‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–µ—Ä–µ–¥ –≤–∏—Ö–æ–¥–æ–º (skipSaveSettings=true)');
    }
    tts.disconnect();
});

// --- –í–∏–ø–∞–¥–∫–æ–≤–∞ —Ü–∏—Ç–∞—Ç–∞ ---
const QUOTES = [
    '–°–ª–æ–≤–∞ ‚Äî —Ü–µ, –∑–≤—ñ—Å–Ω–æ, –Ω–∞–π–º–æ–≥—É—Ç–Ω—ñ—à–∞ –∑–±—Ä–æ—è –ª—é–¥—Å—Ç–≤–∞. ‚Äî –ö—ñ–ø–ª—ñ–Ω–≥',
    '–í–ø–µ—Ä–µ–¥ —ñ –≤–≥–æ—Ä—É ‚Äî –æ—Å—å –Ω–∞—à —à–ª—è—Ö. ‚Äî –ì. –°–∫–æ–≤–æ—Ä–æ–¥–∞',
    '–î–æ—Ä–æ–≥—É –æ—Å–∏–ª–∏—Ç –∏–¥—É—â–∏–π. ‚Äî –°–µ–Ω–µ–∫–∞',
    'The only limit to our realization of tomorrow is our doubts of today. ‚Äî F. D. Roosevelt',
    'Simplicity is the soul of efficiency. ‚Äî Austin Freeman',
    'Talk is cheap. Show me the code. ‚Äî Linus Torvalds',
    'Stay hungry. Stay foolish. ‚Äî Steve Jobs',
    'Make it work, make it right, make it fast. ‚Äî Kent Beck'
];

function insertRandomQuote() {
    const quote = QUOTES[Math.floor(Math.random() * QUOTES.length)];
    // –Ø–∫—â–æ –≤ textarea –≤–∂–µ —î —Ç–µ–∫—Å—Ç ‚Äî –¥–æ–¥–∞–º–æ –∑ –Ω–æ–≤–æ–≥–æ —Ä—è–¥–∫–∞
    textInput.value = textInput.value ? (textInput.value.trimEnd() + '\n' + quote) : quote;
    updateCharCount();
    saveSettings();
}

if (randomQuoteBtn) {
    randomQuoteBtn.addEventListener('click', insertRandomQuote);
}

function clearText() {
    textInput.value = '';
    updateCharCount();
    if (etaDiv) etaDiv.textContent = '';
    saveSettings();
}

if (clearTextBtn) {
    clearTextBtn.addEventListener('click', clearText);
}

function clearAllSettings() {
    try {
        localStorage.removeItem('edgeTTSSettings');
        skipSaveSettings = true;
        updateStatus('–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ—á–∏—â–µ–Ω–æ', 'success');
        // –°–∫–∏–Ω—É—Ç–∏ UI
        rateSlider.value = '0';
        pitchSlider.value = '0';
        rateDisplay.textContent = formatSliderValue(rateSlider.value, '%');
        pitchDisplay.textContent = formatSliderValue(pitchSlider.value, 'Hz');
        // –ü–µ—Ä–µ—Å–æ—Ä—Ç—É–≤–∞—Ç–∏ –≥–æ–ª–æ—Å–∏ (RU –≤ –∫—ñ–Ω–µ—Ü—å) —ñ –ø–µ—Ä–µ–≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä English
        sortVoicesOptions();
        if (filterEnglishCheckbox) {
            // –ó–∞–ª–∏—à–∏—Ç–∏ —Å—Ç–∞–Ω –≥–∞–ª–æ—á–∫–∏ —è–∫ —î, –∞–ª–µ –∑–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä –¥–æ —Å–ø–∏—Å–∫—É
            applyEnglishFilter(filterEnglishCheckbox.checked);
        }
    } catch (e) {
        console.error('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—á–∏—Å—Ç–∏—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è', e);
        updateStatus('–ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å', 'error');
    }
}

if (saveSettingsBtn) {
    saveSettingsBtn.addEventListener('click', () => {
        // –î–æ–∑–≤–æ–ª—è—î–º–æ –∑–±–µ—Ä–µ–≥—Ç–∏ –≤—Ä—É—á–Ω—É –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ –±—É–≤ —Ä–µ–∂–∏–º skip
        saveSettings(true);
        // –ü—ñ—Å–ª—è —è–≤–Ω–æ–≥–æ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–¥–∞–ª—ñ –º–æ–∂–Ω–∞ –∑–Ω–æ–≤—É –∞–≤—Ç–æ–∑–±–µ—Ä—ñ–≥–∞—Ç–∏
        skipSaveSettings = false;
        updateStatus('–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ', 'success');
    });
}

if (clearSettingsBtn) {
    clearSettingsBtn.addEventListener('click', clearAllSettings);
}
