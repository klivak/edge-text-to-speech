class TextProcessor {
    constructor(maxChunkSize = 2000, minChunkSize = 800) {
        this.maxChunkSize = maxChunkSize;
        this.minChunkSize = minChunkSize;
        this.chunks = [];
    }

    // –†–æ–∑–¥—ñ–ª–µ–Ω–Ω—è –≤–µ–ª–∏–∫–æ–≥–æ —Ç–µ–∫—Å—Ç—É –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏
    processText(text) {
        console.log('üìù –ü–æ—á–∞—Ç–æ–∫ –æ–±—Ä–æ–±–∫–∏ —Ç–µ–∫—Å—Ç—É...');
        console.log('üìè –†–æ–∑–º—ñ—Ä —Ç–µ–∫—Å—Ç—É:', text.length, '—Å–∏–º–≤–æ–ª—ñ–≤');
        
        // –û—á–∏—â–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É
        let cleanText = this.cleanText(text);
        
        // –†–æ–∑–±–∏—Ç—Ç—è –Ω–∞ —Ä–µ—á–µ–Ω–Ω—è
        let sentences = this.splitIntoSentences(cleanText);
        
        // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —á–∞—Å—Ç–∏–Ω –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–æ–∑–º—ñ—Ä—É
        this.chunks = this.createChunks(sentences);
        
        console.log('‚úÖ –¢–µ–∫—Å—Ç —Ä–æ–∑–¥—ñ–ª–µ–Ω–æ –Ω–∞', this.chunks.length, '—á–∞—Å—Ç–∏–Ω');
        this.chunks.forEach((chunk, index) => {
            console.log(`   –ß–∞—Å—Ç–∏–Ω–∞ ${index + 1}: ${chunk.length} —Å–∏–º–≤–æ–ª—ñ–≤`);
        });
        
        return this.chunks;
    }

    // –û—á–∏—â–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É
    cleanText(text) {
        let clean = text
            .replace(/[~\|\*\^]/g, "-")
            .replace(/\\/g, "/")
            .replace(/&/g, " and ")
            .replace(/</g, "(")
            .replace(/>/g, ")")
            .replace(/\r\n/g, "\n")
            .replace(/\r/g, "\n");
        
        return clean;
    }

    // –†–æ–∑–±–∏—Ç—Ç—è –Ω–∞ —Ä–µ—á–µ–Ω–Ω—è
    splitIntoSentences(text) {
        // –†–æ–∑–±–∏–≤–∞—î–º–æ –ø–æ –∑–Ω–∞–∫–∞—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–µ—á–µ–Ω–Ω—è
        const sentences = text.split(/(?<=[.!?])\s+/);
        return sentences.filter(sentence => sentence.trim().length > 0);
    }

    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —á–∞—Å—Ç–∏–Ω –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–æ–∑–º—ñ—Ä—É
    createChunks(sentences) {
        const chunks = [];
        let currentChunk = "";

        for (const sentence of sentences) {
            const sentenceWithSpace = sentence + " ";
            
            // –Ø–∫—â–æ –ø–æ—Ç–æ—á–Ω–∞ —á–∞—Å—Ç–∏–Ω–∞ + —Ä–µ—á–µ–Ω–Ω—è –ø–µ—Ä–µ–≤–∏—â—É—î –ª—ñ–º—ñ—Ç
            if ((currentChunk + sentenceWithSpace).length > this.maxChunkSize && currentChunk.length > 0) {
                // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω—É —á–∞—Å—Ç–∏–Ω—É
                chunks.push(currentChunk.trim());
                currentChunk = sentenceWithSpace;
            } else {
                // –î–æ–¥–∞—î–º–æ —Ä–µ—á–µ–Ω–Ω—è –¥–æ –ø–æ—Ç–æ—á–Ω–æ—ó —á–∞—Å—Ç–∏–Ω–∏
                currentChunk += sentenceWithSpace;
            }
        }

        // –î–æ–¥–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—é —á–∞—Å—Ç–∏–Ω—É
        if (currentChunk.trim()) {
            chunks.push(currentChunk.trim());
        }

        // –Ø–∫—â–æ —á–∞—Å—Ç–∏–Ω–∏ –∑–∞–Ω–∞–¥—Ç–æ –º–∞–ª—ñ, –æ–±'—î–¥–Ω—É—î–º–æ —ó—Ö
        return this.mergeSmallChunks(chunks);
    }

    // –û–±'—î–¥–Ω–∞–Ω–Ω—è –º–∞–ª–∏—Ö —á–∞—Å—Ç–∏–Ω
    mergeSmallChunks(chunks) {
        const mergedChunks = [];
        let currentChunk = "";

        for (const chunk of chunks) {
            if ((currentChunk + " " + chunk).length <= this.maxChunkSize) {
                currentChunk += (currentChunk ? " " : "") + chunk;
            } else {
                if (currentChunk) {
                    mergedChunks.push(currentChunk);
                }
                currentChunk = chunk;
            }
        }

        if (currentChunk) {
            mergedChunks.push(currentChunk);
        }

        return mergedChunks;
    }

    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    getStats() {
        return {
            totalChunks: this.chunks.length,
            totalCharacters: this.chunks.reduce((sum, chunk) => sum + chunk.length, 0),
            averageChunkSize: Math.round(this.chunks.reduce((sum, chunk) => sum + chunk.length, 0) / this.chunks.length),
            minChunkSize: Math.min(...this.chunks.map(chunk => chunk.length)),
            maxChunkSize: Math.max(...this.chunks.map(chunk => chunk.length))
        };
    }

    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —á–∞—Å—Ç–∏–Ω–∏ –∑–∞ —ñ–Ω–¥–µ–∫—Å–æ–º
    getChunk(index) {
        return this.chunks[index] || null;
    }

    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö —á–∞—Å—Ç–∏–Ω
    getAllChunks() {
        return [...this.chunks];
    }
}
